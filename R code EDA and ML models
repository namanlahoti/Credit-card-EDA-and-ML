```{r warning = FALSE, message = FALSE}
# Suppress dplyr summarise grouping warning messages
options(dplyr.summarise.inform = FALSE)

library(tidyverse)
library(tidymodels)
library(plotly)
library(highcharter)
library(discrim)
library(klaR)

credit_card_df <- readRDS(url('https://gmubusinessanalytics.netlify.app/data/credit_card_df.rds'))

credit_card_df
```



# Data Analysis


# Question 1


**Question**:
What is the customer account status based on the marital status and what is the average expenditure based on marital status?

**Answer**:
It can be found that there is no such huge difference between the expenditure of married and divorced customers, where the average expense of married customers is 3797.010 and divorced customers are 3678.593 respectively. We can say that single customers have spent more when compared to the other two categories.

From the plot it can be observed that most of the customers having active accounts are married, however single customers also do have a large part between the customer's marital status. 

In conclusion, from the analysis we can say that there are more chances that customers who are single are more likely to maintain their account active when compared to the other set of customers.

```{r}
#Yearly average expenditure based on marital status
credit_card_df %>% group_by(marital_status) %>% 
  summarise(yearly_avg = mean(total_spend_last_year))


#Customer status and their marital status
ggplot(credit_card_df, aes(y=marital_status))+geom_bar(aes(fill =customer_status),position = "dodge")+theme_minimal()+ theme_classic()  +xlab("Count") + ylab("Marital Status") + ggtitle(" Customer Status by Marital Status" )+  labs(fill = "Customer Status")+ scale_fill_brewer(palette="Blues")

```



# Question 2


**Question**:
Is there any relationship between the Education of a customer and the customer status?

**Answer**:
From the analysis it has been observed that there are more customers who have completed their Master's degree followed by Associates, Bachelor's and then doctorate customers.

The plot depicts that more number of customers who hold a Masters degree have an active account followed by customers with associates degree. But, interestingly, it is also seen that more number of customers (126 customers) with doctorate degree have closed account meaning they are inactive. In conclusion, reason should be found out that why there are more number of inactive accounts with customers holding a doctorate/PhD degree.

```{r}
#Customers and education
credit_card_df%>%
  dplyr::select(education)%>%
  count(education)

#plot of customer status and their education
plot_ly(credit_card_df,x = ~education, color = ~customer_status)%>%
  layout(title = "Education and Customer status",
         xaxis =list(title = 'Education'), 
         yaxis = list(title = 'Count'))

```


# Question 3


**Question**:
Is there any correlation among the Total credit Amount Average, marital status and employment status with respect to the account status?

**Answer**:
From the data, it has been observed that divorced customers having a full-time job have the highest average credit amount among all the other customers. And customers who are divorced and do some part-time job are the ones with the lowest average credit amount.

It has been observed from the plots that customers who are single and married do not use their credit line more when compared to the divorced customers.

```{r}
credit_card_df %>% 
  group_by(marital_status, employment_status) %>%
  mutate(credit_usage = credit_limit * utilization_ratio) %>%
  summarise(Total_credit_Amount_Avg = mean(credit_usage))%>%
  arrange(desc(Total_credit_Amount_Avg))

credit_card_df %>% 
  group_by(marital_status, employment_status) %>% 
  mutate(credit_usage = credit_limit * utilization_ratio) %>%
  ggplot(aes(x = credit_usage, fill = marital_status)) +
       geom_histogram(color = "yellow", bins = 20) + 
       facet_wrap( ~ marital_status, nrow = 1)+xlab("Credit Usage") + ylab("Count of customers")


```



# Question 4


**Question**:
Which type of credit card customers were mostly inactive during the last year?

**Answer**:
From the plot, it is observed that the average total months inactive for each customer in the last 12 months of both types of customers is fluctuating (because itâ€™s a discrete data) with some outliers in the inactive/closed customers distribution. It is noticed that customers who have a closed account have been more inactive when compared to the customers with an active account.

```{r}
credit_card_df %>%
  ggplot( aes(months_inactive_last_year, fill=customer_status))+
  geom_density(alpha=0.6)+
  geom_vline(aes(xintercept=mean(months_inactive_last_year)),color="black",
             linetype="dashed", size=1)+theme_light() + scale_fill_manual(values =
                                                                            c("red", "green"))+
  ggtitle("Credit customers who were mostly inactive during the last year")+
  xlab("Months Inactive last year")+ylab("Frequency")+ theme(plot.title = element_text(size=15)) 


```



# Question 5


**Question**:
Who had made more than 100 transactions in the last 12 months according to marital status and what is the total percentage of transactions during the last year?

**Answer**:

From the data it can be interpreted that married customers (97 customers) having an active account have made more than 100 transactions in the last 12 months. While on the other hand, only 14 customers who are divorced and have an active account have made more than 100 transactions in the last 12 months.

One way to interpret the separating measures from the boxplot chart is:

50% of customers who left credit card services had number of transactions in the last 12 months less than or equal to 43, remembering that the maximum number of transactions in the last 12 months of customers who left the service is 72. While the median of the people who remained with the card services is 71 transactions.

75% of customers who left credit card services had a number of transactions in the last 12 months equal to or less than 51. The third quartile of people who remained with card services is 82 transactions.



```{r}
#Transactions more than 100 in the last year
credit_card_df %>% 
  dplyr::select(transactions_last_year,customer_status,marital_status)%>%
  filter(transactions_last_year>100)%>%
  count(customer_status,marital_status)%>%
  arrange(desc(n))

#Boxplot for total percentage of transactions during the last year
hcboxplot(outliers = TRUE, x = credit_card_df$transactions_last_year, var = credit_card_df$customer_status, name = "Length") %>%
  hc_title(text = "Total transactions in the last 12 months in terms of percentages", align = "center") %>%
  hc_yAxis(title = list(text = "Number of transactions in the last 12 months")) %>%
  hc_add_theme(hc_theme_smpl()) %>% 
  hc_legend(align = "center")
```
**Bonus Visualization**:
#Cancellations by Marital Status, education levels and card type (Treemap graphs)


```{r}
#cancellations by marital status
credit_card_df %>%
  filter(customer_status == "closed_account") %>%
  count(marital_status) %>%
  hchart("treemap", hcaes(x = marital_status, value = n, color = n)) %>%
  hc_colorAxis(stops = color_stops(colors = viridis::inferno(10))) %>%
  hc_title(text = "Number of Cancellations By Marital Status", align = "center")

#Cancellations by education
credit_card_df %>%
  filter(customer_status == "closed_account") %>%
  count(education) %>%
  hchart("treemap", hcaes(x = education, value = n, color = n)) %>%
  hc_colorAxis(stops = color_stops(colors = viridis::inferno(10))) %>%
  hc_title(text = "Number of Cancellations By Educational Level", align = "center")

#Cancellations by Card Type
credit_card_df %>%
  filter(customer_status == "closed_account") %>%
  count(card_type) %>%
  hchart("treemap", hcaes(x = card_type, value = n, color = n)) %>%
  hc_colorAxis(stops = color_stops(colors = viridis::inferno(10))) %>%
  hc_title(text = "Number of Cancellations by Card Type", align = "center")

```


# Machine Learning




# Model 1
#Logistic Model
```{r}

#Creating training and testing datasets by using split
set.seed(245)

#Create a data split object
credit_card_split<-initial_split(credit_card_df,prop=0.7,strata = customer_status)

#Create the training data
credit_card_training<-credit_card_split%>%
  training()

#Create the testing data
credit_card_testing<-credit_card_split%>%
  testing()

# Check number of rows in each dataset
nrow(credit_card_training)
nrow(credit_card_testing)

```
```{r}
# Specify feature engineering recipe
credit_card_recipe<-recipe(customer_status~., 
                          data = credit_card_training)%>% 
  step_YeoJohnson(all_numeric(), -all_outcomes()) %>% 
  step_normalize(all_numeric(), -all_outcomes()) %>% 
  step_dummy(all_nominal(), -all_outcomes())

# Train and transform credit_card_recipe
credit_card_recipe %>% 
  prep(training = credit_card_training) %>% 
  bake(new_data = NULL)

```
```{r}
# Train logistic model
logistic_model<-logistic_reg()%>%
  set_engine("glm")%>%
  set_mode("classification")


#Create a workflow
credit_card_wkfl<-workflow()%>%
  #Include model object
  add_model(logistic_model)%>%
  #Include recipe object
  add_recipe(credit_card_recipe)

#Train Logistic model
logistic_fit<-credit_card_wkfl%>%
  fit(data=credit_card_training)
```

```{r}
#Obtain class predictions
class_preds<-predict(logistic_fit,new_data = credit_card_testing,type = "class")

#Obtain estimated probabilities
prob_preds<-predict(logistic_fit,new_data = credit_card_testing,type = "prob")

#Combine test set results
credit_card_results <- credit_card_testing %>% 
  dplyr::select(customer_status) %>% 
  bind_cols(class_preds, prob_preds)

credit_card_results

```


```{r}
#Create a confusion matrix
credit_card_results%>%
  conf_mat(truth=customer_status,estimate=.pred_class)

#Creating a custom metrics function
credit_card_metrics <- metric_set(accuracy, sens, spec, f_meas, roc_auc)

credit_card_metrics(credit_card_results, 
           truth = customer_status, 
           estimate = .pred_class,
           .pred_closed_account)
```
```{r}
#Train model with last_fit()
credit_card_last_fit<-credit_card_wkfl%>%
  last_fit(customer_status~.,split=credit_card_split)

# View test set metrics
credit_card_last_fit %>% 
  collect_metrics()

# Collect predictions
last_fit_results <- credit_card_last_fit %>% 
  collect_predictions()

last_fit_results

```
```{r}
#PLot ROC Curve
last_fit_results %>% 
  roc_curve(truth = customer_status, estimate = .pred_closed_account) %>% 
  autoplot()
```




# Model 2
#K-Nearest Neighbours(KNN)
```{r}
#set seed
set.seed(245)
#Dividing dataset into k-groups or folds each equal size
credit_card_folds <- vfold_cv(credit_card_training, v = 4)

#Create a KNN model
credit_card_knn_model <- nearest_neighbor(neighbors = tune()) %>% 
            #set engine to knn
             set_engine('kknn') %>% 
            #set mode as classification
             set_mode('classification')
```

```{r}
#create a workflow
credit_card_knn_wkfl<-workflow() %>% 
          #Include model object
          add_model(credit_card_knn_model) %>% 
          #Include recipe object
          add_recipe(credit_card_recipe)

## Create a grid of hyperparameter values to test
k_grid <- tibble(neighbors = c(10, 20, 30, 50, 75, 100, 125, 150))

#View Grid
k_grid

## Tune  workflow
set.seed(360)

knn_tuning <- credit_card_knn_wkfl %>% 
              tune_grid(resamples = credit_card_folds,
                         grid = k_grid)
```
```{r}
## Show the top 5 best models based on roc_auc metric
knn_tuning %>% show_best('roc_auc')

## Select best model based on roc_auc
best_k <- knn_tuning %>% 
          select_best(metric = 'roc_auc')

## View model
best_k

## Finalize workflow by adding the best performing model
final_knn_wkfl <- credit_card_knn_wkfl %>% 
                finalize_workflow(best_k)
```
```{r}
#Train and evaluate with last_fit()
last_fit_knn <- final_knn_wkfl %>% 
                last_fit(split = credit_card_split)

last_fit_knn %>% collect_metrics()
```


```{r}
#Collect Predictions
credit_card_knn_predictions <- last_fit_knn %>% 
                   collect_predictions()

credit_card_knn_predictions
```
```{r}
#Create a confusion matrix
conf_mat(credit_card_knn_predictions, truth = customer_status, estimate = .pred_class)
```


```{r}
#Plot ROC Curve
credit_card_knn_predictions %>% 
  roc_curve(truth = customer_status, estimate = .pred_closed_account) %>% 
  autoplot()


#F1 score
f_meas(credit_card_knn_predictions, truth = customer_status, estimate = .pred_class)
```




# Model 3
#Quadratic Discrminant Analysis(QDA)
```{r}
#QDA Model Specification
qda_model <- discrim_regularized(frac_common_cov = 0) %>% 
             set_engine('klaR') %>% 
             set_mode('classification')
```

```{r}
#Create a workflow
qda_wkfl <- workflow() %>% 
          #Add model object
          add_model(qda_model) %>% 
          #Add recipe object
          add_recipe(credit_card_recipe)
```

```{r}
#Train and evaluate with last_fit()
last_fit_qda <- qda_wkfl %>% 
                last_fit(split = credit_card_split)

#Collect Metrics
last_fit_qda %>% collect_metrics()

#Collect Predictions
qda_predictions <- last_fit_qda %>% 
                     collect_predictions()

qda_predictions

#F1 score
f_meas(qda_predictions, truth = customer_status, estimate = .pred_class)

```
```{r}
qda_predictions %>% 
  roc_curve(truth = customer_status, estimate = .pred_closed_account) %>% 
  autoplot()
```
